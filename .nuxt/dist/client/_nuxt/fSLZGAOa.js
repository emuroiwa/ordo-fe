import{K as y,r as p}from"./B83YThMf.js";const x=()=>{const{$fetch:l}=y(),u=p([]),o=p(null),g=p([]),n=p(!1),c=p(null),d=p({current_page:1,last_page:1,per_page:12,total:0}),h=async(t={})=>{var a;n.value=!0,c.value=null;try{const e=new URLSearchParams;Object.entries(t).forEach(([s,i])=>{i!=null&&i!==""&&e.append(s,String(i))});const r=await l(`/api/v1/services?${e.toString()}`);return u.value=r.data,d.value={current_page:r.current_page,last_page:r.last_page,per_page:r.per_page,total:r.total},r}catch(e){throw c.value=((a=e.data)==null?void 0:a.message)||"Failed to fetch services",e}finally{n.value=!1}};return{services:u,service:o,categories:g,loading:n,error:c,pagination:d,fetchServices:h,fetchService:async t=>{var a;n.value=!0,c.value=null;try{const e=t.split("/");if(e.length===2){const[r,s]=e;o.value=await l(`/api/v1/services/${r}/${s}`)}else throw new Error("Invalid service slug format");return o.value}catch(e){throw c.value=((a=e.data)==null?void 0:a.message)||"Failed to fetch service",e}finally{n.value=!1}},fetchServiceById:async t=>{var a;n.value=!0,c.value=null;try{return o.value=await l(`/api/v1/services/${t}/edit`),o.value}catch(e){throw c.value=((a=e.data)==null?void 0:a.message)||"Failed to fetch service",e}finally{n.value=!1}},fetchCategories:async()=>{var t;try{return g.value=await l("/api/v1/service-categories"),g.value}catch(a){throw c.value=((t=a.data)==null?void 0:t.message)||"Failed to fetch categories",a}},createService:async t=>{var a;n.value=!0,c.value=null;try{const e=new FormData;Object.entries(t).forEach(([s,i])=>{s!=="images"&&(s==="tags"||s==="requirements"?e.append(s,JSON.stringify(i)):i!=null&&e.append(s,String(i)))}),t.images&&Array.from(t.images).forEach((s,i)=>{e.append(`images[${i}]`,s)});const r=await l("/api/v1/services",{method:"POST",body:e});return u.value.length>0&&u.value.unshift(r.service),r}catch(e){throw c.value=((a=e.data)==null?void 0:a.message)||"Failed to create service",e}finally{n.value=!1}},updateService:async(t,a)=>{var e,r;n.value=!0,c.value=null;try{const s=new FormData;s.append("_method","PUT"),Object.entries(a).forEach(([v,f])=>{v!=="images"&&(v==="tags"||v==="requirements"?s.append(v,JSON.stringify(f)):f!=null&&s.append(v,String(f)))}),a.images&&Array.from(a.images).forEach((v,f)=>{s.append(`images[${f}]`,v)});const i=await l(`/api/v1/services/${t}`,{method:"POST",body:s}),m=u.value.findIndex(v=>v.id===t);return m!==-1&&(u.value[m]=i.service),((e=o.value)==null?void 0:e.id)===t&&(o.value=i.service),i}catch(s){throw c.value=((r=s.data)==null?void 0:r.message)||"Failed to update service",s}finally{n.value=!1}},deleteService:async t=>{var a,e;n.value=!0,c.value=null;try{return await l(`/api/v1/services/${t}`,{method:"DELETE"}),u.value=u.value.filter(r=>r.id!==t),((a=o.value)==null?void 0:a.id)===t&&(o.value=null),!0}catch(r){throw c.value=((e=r.data)==null?void 0:e.message)||"Failed to delete service",r}finally{n.value=!1}},searchServices:async(t,a={})=>await h({...a,q:t}),fetchMyServices:async(t={})=>{var a;n.value=!0,c.value=null;try{const e=new URLSearchParams;Object.entries(t).forEach(([s,i])=>{i!=null&&i!==""&&e.append(s,String(i))});const r=await l(`/api/v1/services/my-services?${e.toString()}`);return u.value=r.data,d.value={current_page:r.current_page,last_page:r.last_page,per_page:r.per_page,total:r.total},r}catch(e){throw c.value=((a=e.data)==null?void 0:a.message)||"Failed to fetch my services",e}finally{n.value=!1}},fetchServiceAnalytics:async t=>{var a;try{return await l(`/api/v1/services/${t}/analytics`)}catch(e){throw c.value=((a=e.data)==null?void 0:a.message)||"Failed to fetch analytics",e}},formatPrice:(t,a="ZAR")=>new Intl.NumberFormat("en-ZA",{style:"currency",currency:a,minimumFractionDigits:0,maximumFractionDigits:2}).format(t),getOptimizedImageUrl:(t,a="medium")=>{var e;return(e=t.thumbnail_urls)!=null&&e[a]?t.thumbnail_urls[a]:t.url}}};export{x as u};
