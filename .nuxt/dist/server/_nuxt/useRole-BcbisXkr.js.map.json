{"file":"useRole-BcbisXkr.js","mappings":";;AAKA,MAAM,cAA6B,IAAI,UAAU;AAE1C,MAAM,UAAU,MAAM;AAC3B,QAAM,EAAE,KAAA,IAAS,QAAA;AAEjB,QAAM,aAAa,CAAC,SAAyB;AAC3C,QAAI,QAAQ,IAAI,GAAG;AACjB,kBAAY,QAAQ;AAAA,IACtB;AAAA,EACF;AAEA,QAAM,UAAU,CAAC,SAAyB;AACxC,QAAI,QAAQ,IAAI,GAAG;AACjB,kBAAY,QAAQ;AAAA,IACtB;AAAA,EACF;AAEA,QAAM,UAAU,CAAC,SAA4B;;AAC3C,aAAO,gBAAK,UAAL,mBAAY,UAAZ,mBAAmB,SAAS,UAAS;AAAA,EAC9C;AAEA,QAAM,mBAAmB,SAAS,MAAM;;AACtC,UAAM,cAAY,UAAK,UAAL,mBAAY,UAAS,CAAA;AACvC,UAAM,cAAc,UAAU,SAAS,UAAU,KAAK,UAAU,SAAS,QAAQ;AACjF,YAAQ,IAAI,2BAA2B,EAAE,WAAW,aAAa,MAAM,KAAK,OAAO;AACnF,WAAO;AAAA,EACT,CAAC;AAED,QAAM,cAAc,SAAS,MAAM;;AACjC,UAAM,cAAY,UAAK,UAAL,mBAAY,UAAS,CAAC,UAAU;AAClD,QAAI,UAAU,SAAS,QAAQ,EAAG,QAAO;AACzC,WAAO;AAAA,EACT,CAAC;AAED,QAAM,aAAa,SAAS,MAAM,YAAY,UAAU,UAAU;AAClE,QAAM,WAAW,SAAS,MAAM,YAAY,UAAU,QAAQ;AAG9D,QAAM,iBAAiB,MAAM;;AAC3B,SAAI,UAAK,UAAL,mBAAY,OAAO;AACrB,UAAI,KAAK,MAAM,MAAM,SAAS,QAAQ,KAAK,KAAK,MAAM,MAAM,SAAS,UAAU,GAAG;AAEhF,YAAI,CAAC,QAAQ,YAAY,KAAK,GAAG;AAC/B,sBAAY,QAAQ;AAAA,QACtB;AAAA,MACF,WAAW,KAAK,MAAM,MAAM,SAAS,QAAQ,GAAG;AAC9C,oBAAY,QAAQ;AAAA,MACtB,OAAO;AACL,oBAAY,QAAQ;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA;AAAA,IAEL,aAAa,SAAS,WAAW;AAAA;AAAA,IAGjC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;","names":[],"sources":["../../../../composables/useRole.ts"],"sourcesContent":["import { ref, readonly, computed, type Ref } from 'vue'\n\nexport type UserRole = 'customer' | 'vendor'\n\n// Global state\nconst currentRole: Ref<UserRole> = ref('customer')\n\nexport const useRole = () => {\n  const { user } = useAuth()\n\n  const toggleRole = (role: UserRole): void => {\n    if (hasRole(role)) {\n      currentRole.value = role\n    }\n  }\n\n  const setRole = (role: UserRole): void => {\n    if (hasRole(role)) {\n      currentRole.value = role\n    }\n  }\n\n  const hasRole = (role: UserRole): boolean => {\n    return user.value?.roles?.includes(role) || false\n  }\n\n  const hasMultipleRoles = computed(() => {\n    const userRoles = user.value?.roles || []\n    const hasMultiple = userRoles.includes('customer') && userRoles.includes('vendor')\n    console.log('hasMultipleRoles debug:', { userRoles, hasMultiple, user: user.value })\n    return hasMultiple\n  })\n\n  const primaryRole = computed(() => {\n    const userRoles = user.value?.roles || ['customer']\n    if (userRoles.includes('vendor')) return 'vendor'\n    return 'customer'\n  })\n\n  const isCustomer = computed(() => currentRole.value === 'customer')\n  const isVendor = computed(() => currentRole.value === 'vendor')\n\n  // Auto-set role based on user's roles\n  const initializeRole = () => {\n    if (user.value?.roles) {\n      if (user.value.roles.includes('vendor') && user.value.roles.includes('customer')) {\n        // User has both roles, keep current selection or default to vendor\n        if (!hasRole(currentRole.value)) {\n          currentRole.value = 'vendor'\n        }\n      } else if (user.value.roles.includes('vendor')) {\n        currentRole.value = 'vendor'\n      } else {\n        currentRole.value = 'customer'\n      }\n    }\n  }\n\n  return {\n    // State\n    currentRole: readonly(currentRole),\n    \n    // Computed\n    isCustomer,\n    isVendor,\n    hasMultipleRoles,\n    primaryRole,\n    \n    // Actions\n    toggleRole,\n    setRole,\n    hasRole,\n    initializeRole\n  }\n}"],"version":3}