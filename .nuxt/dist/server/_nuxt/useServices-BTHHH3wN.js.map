{"version":3,"file":"useServices-BTHHH3wN.js","sources":["../../../../composables/useServices.ts"],"sourcesContent":["import type { Ref } from 'vue'\n\nexport interface ServiceCategory {\n  id: string\n  name: string\n  slug: string\n  description?: string\n  icon?: string\n  color: string\n  is_active: boolean\n  services_count: number\n}\n\nexport interface ServiceImage {\n  id: string\n  url: string\n  webp_url?: string\n  avif_url?: string\n  alt_text?: string\n  blurhash?: string\n  is_primary: boolean\n  processing_status: 'pending' | 'processing' | 'completed' | 'failed'\n  thumbnail_urls: Record<string, string>\n}\n\nexport interface Service {\n  id: string\n  title: string\n  description: string\n  short_description?: string\n  category_id: string\n  category?: ServiceCategory\n  price_type: 'fixed' | 'hourly' | 'negotiable'\n  base_price: number\n  max_price?: number\n  currency: string\n  duration_minutes?: number\n  location_type: 'client_location' | 'service_location' | 'online'\n  address?: any\n  latitude?: number\n  longitude?: number\n  tags: string[]\n  requirements?: string[]\n  status: 'draft' | 'active' | 'paused' | 'archived'\n  is_featured: boolean\n  instant_booking: boolean\n  slug: string\n  full_slug: string\n  primary_image?: ServiceImage\n  service_images?: ServiceImage[]\n  user?: {\n    id: string\n    name: string\n    business_name?: string\n    slug?: string\n    avatar_url?: string\n  }\n  average_rating: number\n  review_count: number\n  view_count: number\n  booking_count: number\n  created_at: string\n  formatted_price: string\n  location_display: string\n}\n\nexport interface ServiceFilters {\n  category?: string\n  price_min?: number\n  price_max?: number\n  latitude?: number\n  longitude?: number\n  radius?: number\n  min_rating?: number\n  location_type?: string\n  featured?: boolean\n  instant_booking?: boolean\n  tags?: string\n  sort?: 'relevance' | 'price_low' | 'price_high' | 'rating' | 'newest' | 'popular' | 'distance'\n  per_page?: number\n  page?: number\n}\n\nexport interface ServiceForm {\n  title: string\n  description: string\n  short_description: string\n  category_id: string\n  price_type: 'fixed' | 'hourly' | 'negotiable'\n  base_price: number\n  max_price?: number\n  currency: string\n  duration_minutes?: number\n  location_type: 'client_location' | 'service_location' | 'online'\n  address?: any\n  latitude?: number\n  longitude?: number\n  tags: string[]\n  requirements: string[]\n  instant_booking: boolean\n  images?: FileList | File[]\n}\n\nexport const useServices = () => {\n  const config = useRuntimeConfig()\n  \n  // Helper function to make API calls with proper error handling\n  const makeApiCall = async (url: string, options: any = {}) => {\n    // Get auth token from cookie\n    const tokenCookie = useCookie('auth-token')\n    \n    // Prepare headers with authentication\n    const headers: Record<string, string> = {\n      'Accept': 'application/json',\n      ...options.headers\n    }\n    \n    // Only set Content-Type for non-FormData requests\n    if (!(options.body instanceof FormData)) {\n      headers['Content-Type'] = 'application/json'\n    }\n    \n    // Add authorization header if token exists\n    if (tokenCookie.value) {\n      headers['Authorization'] = `Bearer ${tokenCookie.value}`\n    }\n    \n    // Use global $fetch that should be available in Nuxt 3\n    return await $fetch(url, {\n      ...options,\n      baseURL: config.public.apiBase,\n      headers\n    })\n  }\n\n  // State\n  const services: Ref<Service[]> = ref([])\n  const service: Ref<Service | null> = ref(null)\n  const categories: Ref<ServiceCategory[]> = ref([])\n  const loading = ref(false)\n  const error: Ref<string | null> = ref(null)\n  const pagination = ref({\n    current_page: 1,\n    last_page: 1,\n    per_page: 12,\n    total: 0\n  })\n\n  // Fetch services with filters\n  const fetchServices = async (filters: ServiceFilters = {}) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      const queryParams = new URLSearchParams()\n      \n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          queryParams.append(key, String(value))\n        }\n      })\n\n      const response = await makeApiCall(`/api/v1/services?${queryParams.toString()}`)\n      \n      services.value = response.data\n      pagination.value = {\n        current_page: response.current_page,\n        last_page: response.last_page,\n        per_page: response.per_page,\n        total: response.total\n      }\n\n      return response\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to fetch services'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Fetch single service by full slug (userSlug/serviceSlug)\n  const fetchService = async (fullSlug: string) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      const slugParts = fullSlug.split('/')\n      if (slugParts.length === 2) {\n        const [userSlug, serviceSlug] = slugParts\n        service.value = await makeApiCall(`/api/v1/services/${userSlug}/${serviceSlug}`)\n      } else {\n        throw new Error('Invalid service slug format')\n      }\n      return service.value\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to fetch service'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Fetch single service by ID (for editing)\n  const fetchServiceById = async (id: string) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      service.value = await makeApiCall(`/api/v1/services/${id}/edit`)\n      return service.value\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to fetch service'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Fetch service categories\n  const fetchCategories = async () => {\n    try {\n      categories.value = await makeApiCall('/api/v1/service-categories')\n      return categories.value\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to fetch categories'\n      throw err\n    }\n  }\n\n  // Create service\n  const createService = async (serviceData: ServiceForm) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      const formData = new FormData()\n\n      // Add text fields\n      Object.entries(serviceData).forEach(([key, value]) => {\n        if (key === 'images') return // Handle separately\n        if (key === 'tags' || key === 'requirements') {\n          formData.append(key, JSON.stringify(value))\n        } else if (value !== undefined && value !== null) {\n          formData.append(key, String(value))\n        }\n      })\n\n      // Add images\n      if (serviceData.images) {\n        Array.from(serviceData.images).forEach((file, index) => {\n          formData.append(`images[${index}]`, file)\n        })\n      }\n\n      const newService = await makeApiCall('/api/v1/services', {\n        method: 'POST',\n        body: formData\n      })\n\n      // Add to services list if we have it loaded\n      if (services.value.length > 0) {\n        services.value.unshift(newService.service)\n      }\n\n      return newService\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to create service'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Update service\n  const updateService = async (id: string, serviceData: Partial<ServiceForm>) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      const formData = new FormData()\n      formData.append('_method', 'PUT')\n\n      // Add text fields\n      Object.entries(serviceData).forEach(([key, value]) => {\n        if (key === 'images') return // Handle separately\n        if (key === 'tags' || key === 'requirements') {\n          formData.append(key, JSON.stringify(value))\n        } else if (value !== undefined && value !== null) {\n          formData.append(key, String(value))\n        }\n      })\n\n      // Add images if provided\n      if (serviceData.images) {\n        Array.from(serviceData.images).forEach((file, index) => {\n          formData.append(`images[${index}]`, file)\n        })\n      }\n\n      const updatedService = await makeApiCall(`/api/v1/services/${id}`, {\n        method: 'POST', // Laravel expects POST with _method=PUT for file uploads\n        body: formData\n      })\n\n      // Update in services list\n      const index = services.value.findIndex(s => s.id === id)\n      if (index !== -1) {\n        services.value[index] = updatedService.service\n      }\n\n      // Update single service if it's the same\n      if (service.value?.id === id) {\n        service.value = updatedService.service\n      }\n\n      return updatedService\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to update service'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Delete service\n  const deleteService = async (id: string) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      await makeApiCall(`/api/v1/services/${id}`, {\n        method: 'DELETE'\n      })\n\n      // Remove from services list\n      services.value = services.value.filter(s => s.id !== id)\n\n      // Clear single service if it's the same\n      if (service.value?.id === id) {\n        service.value = null\n      }\n\n      return true\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to delete service'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Search services\n  const searchServices = async (query: string, filters: ServiceFilters = {}) => {\n    return await fetchServices({ ...filters, q: query })\n  }\n\n  // Get my services (vendor view)\n  const fetchMyServices = async (filters: Partial<ServiceFilters> = {}) => {\n    loading.value = true\n    error.value = null\n\n    try {\n      const queryParams = new URLSearchParams()\n      \n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          queryParams.append(key, String(value))\n        }\n      })\n\n      const response = await makeApiCall(`/api/v1/services/my-services?${queryParams.toString()}`)\n      \n      services.value = response.data\n      pagination.value = {\n        current_page: response.current_page,\n        last_page: response.last_page,\n        per_page: response.per_page,\n        total: response.total\n      }\n\n      return response\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to fetch my services'\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // Get service analytics\n  const fetchServiceAnalytics = async (serviceId: string) => {\n    try {\n      return await makeApiCall(`/api/v1/services/${serviceId}/analytics`)\n    } catch (err: any) {\n      error.value = err.data?.message || 'Failed to fetch analytics'\n      throw err\n    }\n  }\n\n  // Helper function to format price\n  const formatPrice = (price: number, currency = 'ZAR') => {\n    return new Intl.NumberFormat('en-ZA', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(price)\n  }\n\n  // Helper function to get optimized image URL\n  const getOptimizedImageUrl = (image: ServiceImage, size = 'medium') => {\n    if (image.thumbnail_urls?.[size]) {\n      return image.thumbnail_urls[size]\n    }\n    return image.url\n  }\n\n  return {\n    // State\n    services,\n    service,\n    categories,\n    loading,\n    error,\n    pagination,\n\n    // Methods\n    fetchServices,\n    fetchService,\n    fetchServiceById,\n    fetchCategories,\n    createService,\n    updateService,\n    deleteService,\n    searchServices,\n    fetchMyServices,\n    fetchServiceAnalytics,\n\n    // Helpers\n    formatPrice,\n    getOptimizedImageUrl\n  }\n}"],"names":["index"],"mappings":"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"}